package multiagent;

import java.util.ArrayList;
import java.util.List;

import QLearning.MAction;
import QLearning.MainClass;
import QLearning.WState;
import burlap.behavior.policy.EpsilonGreedy;
import burlap.behavior.stochasticgames.GameEpisode;
import burlap.behavior.stochasticgames.PolicyFromJointPolicy;
import burlap.behavior.stochasticgames.agents.maql.MultiAgentQLearning;
import burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.equilibriumsolvers.CorrelatedEquilibrium;
import burlap.behavior.stochasticgames.agents.twoplayer.singlestage.equilibriumplayer.equilibriumsolvers.MinMax;
import burlap.behavior.stochasticgames.auxiliary.GameSequenceVisualizer;
import burlap.behavior.stochasticgames.madynamicprogramming.backupOperators.MinMaxQ;
import burlap.behavior.stochasticgames.madynamicprogramming.policies.ECorrelatedQJointPolicy;
import burlap.behavior.stochasticgames.madynamicprogramming.policies.EGreedyJointPolicy;
import burlap.behavior.stochasticgames.madynamicprogramming.policies.EGreedyMaxWellfare;
import burlap.behavior.stochasticgames.solvers.CorrelatedEquilibriumSolver;
import burlap.domain.stochasticgames.gridgame.GGVisualizer;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.SGDomain;
import burlap.mdp.stochasticgames.agent.SGAgentType;
import burlap.mdp.stochasticgames.world.World;
import burlap.statehashing.HashableStateFactory;
import burlap.statehashing.simple.SimpleHashableStateFactory;
import burlap.visualizer.Visualizer;

public class WorldForMultiAgent {

	final double discount = 0.95;
	final double learningRate = 0.1;
	final double defaultQ = 100;
	double epsilon = 0.8;
	int ngames = 1;
	public static boolean isDefenderAttackerAccessingSameNode = false;

	public void createAndRunGameModel() {
		HashableStateFactory hashingFactory = new SimpleHashableStateFactory();
		JointWorldGenerator joint = new JointWorldGenerator();
		SGDomain domain = (SGDomain) joint.generateDomain();

		Reward rf = new Reward();
		Terminal tf = new Terminal();
		WState initialState = new WState(MainClass.nlist);

		// Creating Defender object with all the actions available to him.
		SAgentType defender = new SAgentType("Defender",
				JointWorldGenerator.getDefenderActionList());

		// Adding initial actions of the attacker.
		SAgentType attacker = new SAgentType("Attacker",
				new ArrayList<ActionType>());
		MAction ms = new MAction(MainClass.nlist.get(0).getName(),
				MainClass.ACTION_SCAN);
		MAction mp = new MAction(MainClass.nlist.get(0).getName(),
				MainClass.ACTION_HACK);
		attacker.addAction(ms);
		attacker.addAction(mp);
		attacker.updateActionList(0);

		World w = new World(domain, rf, tf, initialState);

		MultiAgentQLearning dagent = new MultiAgentQLearning(domain, discount,
				learningRate, hashingFactory, defaultQ, new MinMaxQ(), true,
				"defender", defender);
		MultiAgentQLearning aagent = new MultiAgentQLearning(domain, discount,
				learningRate, hashingFactory, defaultQ, new MinMaxQ(), true,
				"attacker", attacker);

		ECorrelatedQJointPolicy jp0 = new ECorrelatedQJointPolicy(
				CorrelatedEquilibriumSolver.CorrelatedEquilibriumObjective.UTILITARIAN,
				0.);

		EGreedyJointPolicy ja0 = new EGreedyJointPolicy(dagent, epsilon, 0);
		EGreedyJointPolicy ja1 = new EGreedyJointPolicy(aagent, epsilon, 1);
		dagent.setLearningPolicy(new PolicyFromJointPolicy(ja0));
		aagent.setLearningPolicy(new PolicyFromJointPolicy(ja1));

		w.join(dagent);
		w.join(aagent);

		System.out.println("Starting training");

		List<GameEpisode> games = new ArrayList<GameEpisode>();
		for (int i = 0; i < ngames; i++) {
			GameEpisode ga = w.runGame();
			games.add(ga);
			if (i % 10 == 0) {
				System.out.println("Game: " + i + ": " + ga.maxTimeStep());
			}
		}

		Visualizer v = GGVisualizer.getVisualizer(9, 9);
		new GameSequenceVisualizer(v, domain, games);

		System.out.println("Finished training");

		for (int i = 0; i < ngames; i++) {
			GameEpisode ga = games.get(i);
			List<JointAction> la = ga.getJointActions();
			List<double[]> lr = ga.getJointRewards();
		}

	}

}
