package multiagent;

import java.util.ArrayList;
import java.util.List;

import QLearning.MAction;
import QLearning.MainClass;
import burlap.mdp.core.action.ActionType;
import burlap.mdp.core.action.UniversalActionType;
import burlap.mdp.stochasticgames.agent.SGAgentType;

public class SAgentType extends SGAgentType {

	private String typeName;
	private List<ActionType> actionsAvailableToType;
	private int agentANum;
	
	public SAgentType(String typeName, ArrayList<ActionType> arrayList) {
		super(typeName, arrayList);
		this.typeName = typeName;
		this.actionsAvailableToType = arrayList;
	}

	public void clearActions() {
		this.actionsAvailableToType.clear();
	}

	// For Attacker
	public void updateActionList(int index) {
		WorldForMultiAgent.attackerNode = MainClass.nlist.get(index).copy();
		int[] ind = new int[2];
		int count = 0;

		for (int i = 0; i < MainClass.nlist.get(index).getAdj().size(); i++) {
			MAction s = new MAction(MainClass.nlist.get(index).getAdj().get(i)
					.getName(), MainClass.ACTION_SCAN);
			MAction p = new MAction(MainClass.nlist.get(index).getAdj().get(i)
					.getName(), MainClass.ACTION_HACK);
			this.addAction(s);
			this.addAction(p);
		}
//		for (int i = 0; i < this.actionsAvailableToType.size(); i++) {
//			UniversalActionType a = (UniversalActionType) this.actionsAvailableToType
//					.get(i);
//			MAction ac = (MAction) a.action;
//			if (ac.getNodeName() == MainClass.nlist.get(index).getName())
//				ind[count++] = i;
//		}
//		this.actionsAvailableToType.remove(ind[0]);
//		this.actionsAvailableToType.remove(ind[1]);
	}

	public void addAction(MAction a) {
		for (int i = 0; i < actionsAvailableToType.size(); i++) {
			UniversalActionType u = (UniversalActionType) this.actionsAvailableToType
					.get(i);
			MAction temp = (MAction) u.action;
			if (a.getActionName().equals(temp.getActionName()))
				return;
		}
		this.actionsAvailableToType.add(new UniversalActionType(a));
	}

	public String getTypeName() {
		return typeName;
	}

	public void setTypeName(String typeName) {
		this.typeName = typeName;
	}

	public List<ActionType> getActionsAvailableToType() {
		return actionsAvailableToType;
	}

	public void setActionsAvailableToType(
			List<ActionType> actionsAvailableToType) {
		this.actionsAvailableToType = actionsAvailableToType;
	}

}
