package multiagent;

import java.util.List;

import Graph.Node;
import Graph.NodeStatus;
import QLearning.MAction;
import QLearning.MainClass;
import QLearning.WState;
import burlap.mdp.core.StateTransitionProb;
import burlap.mdp.core.state.State;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.model.FullJointModel;

public class StateWorld implements FullJointModel {

	@Override
	public State sample(State s, JointAction a) {

		WorldForMultiAgent.isDefenderAttackerAccessingSameNode = false;

		MAction dfaction = (MAction) a.action(0);
		String dname = dfaction.getNodeName();
		String daction = dfaction.getAction();

		MAction ataction = (MAction) a.action(1);
		String aname = ataction.getNodeName();
		String aaction = ataction.getAction();

		State w = s.copy();
		WState state = (WState) w;
		int size = state.getNodeList().size();
		int dindex = 0;
		int aindex = 0;

		// Find the index of the node in the graph on which defender performed
		// an action
		for (int i = 0; i < size; i++) {
			if (dname.equals(state.getNodeList().get(i).getName())) {
				dindex = i;
				break;
			}
		}

		// Find the index of the node in the graph on which attacker performed
		// an action
		for (int i = 0; i < size; i++) {
			if (aname.equals(state.getNodeList().get(i).getName())) {
				aindex = i;
				break;
			}
		}

		// To check if they are accessing the same node. In this case, defender
		// will catch the attacker.
		if (dindex == aindex) {
			Node n = state.getNodeList().get(dindex);
			WorldForMultiAgent.isDefenderAttackerAccessingSameNode = true;

			state.getNodeList().get(dindex)
					.setDstatus(getDefenderUpdatedStatus(daction, n));

		} else {
			// To check if they are accessing different nodes.
			Node dn = state.getNodeList().get(dindex);
			Node an = state.getNodeList().get(aindex);

			state.getNodeList().get(dindex)
					.setDstatus(getDefenderUpdatedStatus(daction, dn));

		}

		return state;
	}

	public String getAttackerUpdatedStatus(String action, Node n) {
		// Action is SCAN
		if (action.equals(MainClass.ACTION_SCAN)) {
			if (n.getAstatus().equals(NodeStatus.UNKNOWN)) {
				return;
			} else if (n.getAstatus().equals(NodeStatus.PATCHED)) {
			} else if (n.getAstatus().equals(NodeStatus.VULNERABLE)) {
				return NodeStatus.VULNERABLE;
			} else {
				return NodeStatus.HACKED;
			}
			// Action is HACK
		} else {
			if (n.getAstatus().equals(NodeStatus.UNKNOWN)) {
				return NodeStatus.UNKNOWN;
			} else if (n.getAstatus().equals(NodeStatus.PATCHED)) {
				return NodeStatus.PATCHED;
			} else if (n.getAstatus().equals(NodeStatus.VULNERABLE)) {
				return NodeStatus.HACKED;
			} else {
				return NodeStatus.HACKED;
			}
		}
	}

	public String getDefenderUpdatedStatus(String action, Node n) {
		// Action is SCAN
		if (action.equals(MainClass.ACTION_SCAN)) {
			// If Attacker has already Hacked it, defender will come to know
			// about it.
			if (n.getAstatus().equals(NodeStatus.HACKED))
				return NodeStatus.HACKED;

			// If attacker has not hacked it, defender will have to see its view
			if (n.getDstatus().equals(NodeStatus.UNKNOWN)) {
				double rand = Math.random();
				if (rand > 0.5) {
					return NodeStatus.PATCHED;
				} else {
					return NodeStatus.VULNERABLE;
				}
			} else if (n.getDstatus().equals(NodeStatus.PATCHED)) {
				double rand = Math.random();
				if (rand > 0.4) {
					return NodeStatus.PATCHED;
				} else {
					return NodeStatus.VULNERABLE;
				}
			} else if (n.getDstatus().equals(NodeStatus.VULNERABLE)) {
				return NodeStatus.VULNERABLE;
			} else {
				return NodeStatus.HACKED;
			}
			// Action is PATCH
		} else {
			if (n.getDstatus().equals(NodeStatus.UNKNOWN)) {
				return NodeStatus.UNKNOWN;
			} else if (n.getDstatus().equals(NodeStatus.PATCHED)) {
				return NodeStatus.PATCHED;
			} else if (n.getDstatus().equals(NodeStatus.VULNERABLE)) {
				return NodeStatus.PATCHED;
			} else {
				return NodeStatus.PATCHED;
			}
		}
	}

	@Override
	public List<StateTransitionProb> stateTransitions(State arg0,
			JointAction arg1) {
		// TODO Auto-generated method stub
		return null;
	}

}
