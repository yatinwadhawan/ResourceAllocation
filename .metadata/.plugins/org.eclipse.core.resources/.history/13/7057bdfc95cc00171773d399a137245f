package multiagent;

import java.util.List;
import Graph.Node;
import Graph.NodeStatus;
import QLearning.MAction;
import QLearning.MainClass;
import QLearning.WState;
import burlap.mdp.core.StateTransitionProb;
import burlap.mdp.core.state.State;
import burlap.mdp.stochasticgames.JointAction;
import burlap.mdp.stochasticgames.model.FullJointModel;

public class StateWorld implements FullJointModel {

	@Override
	public State sample(State s, JointAction a) {

		WorldForMultiAgent.isDefenderAttackerAccessingSameNode = false;

		MAction dfaction = (MAction) a.action(0);
		String dname = dfaction.getNodeName();
		String daction = dfaction.getAction();

		MAction ataction = (MAction) a.action(1);
		String aname = ataction.getNodeName();
		String aaction = ataction.getAction();

		State w = s.copy();
		WState state = (WState) w;
		int size = state.getNodeList().size();
		int dindex = 0;
		int aindex = 0;

		// Find the index of the node in the graph on which defender performed
		// an action
		for (int i = 0; i < size; i++) {
			if (dname.equals(state.getNodeList().get(i).getName())) {
				dindex = i;
				break;
			}
		}

		// Find the index of the node in the graph on which attacker performed
		// an action
		for (int i = 0; i < size; i++) {
			if (aname.equals(state.getNodeList().get(i).getName())) {
				aindex = i;
				break;
			}
		}

		// To check if they are accessing the same node. In this case, defender
		// will catch the attacker.
		if (dindex == aindex) {

			double rand = Math.random();
			if (rand > 0.98)
				WorldForMultiAgent.isDefenderAttackerAccessingSameNode = true;
			else
				WorldForMultiAgent.isDefenderAttackerAccessingSameNode = false;

			Node n = state.getNodeList().get(dindex);

			String status = getDefenderUpdatedStatus(daction, n);
			state.getNodeList().get(dindex).setDstatus(status);
			state.getNodeList().get(dindex).setAstatus(status);
			if (status != NodeStatus.UNKNOWN)
				state.getNodeList().get(dindex).setStatus(status);
			
			String astatus = getAttackerUpdatedStatus(aaction, an, aindex);
			state.getNodeList().get(aindex).setAstatus(astatus);
			if (astatus != NodeStatus.UNKNOWN)
				state.getNodeList().get(aindex).setStatus(astatus);

		} else {
			// To check if they are accessing different nodes.
			Node dn = state.getNodeList().get(dindex);
			Node an = state.getNodeList().get(aindex);

			String dstatus = getDefenderUpdatedStatus(daction, dn);
			state.getNodeList().get(dindex).setDstatus(dstatus);
			if (dstatus != NodeStatus.UNKNOWN)
				state.getNodeList().get(dindex).setStatus(dstatus);

			String astatus = getAttackerUpdatedStatus(aaction, an, aindex);
			state.getNodeList().get(aindex).setAstatus(astatus);
			if (astatus != NodeStatus.UNKNOWN)
				state.getNodeList().get(aindex).setStatus(astatus);
		}

		return state;
	}

	public String getAttackerUpdatedStatus(String action, Node n, int index) {
		// Action is SCAN
		if (action.equals(MainClass.ACTION_SCAN)) {

			// Already patched by the Defender
			if (n.getStatus().equals(NodeStatus.PATCHED))
				return NodeStatus.PATCHED;

			// Already hacked by the attacker
			if (n.getStatus().equals(NodeStatus.HACKED))
				return NodeStatus.HACKED;

			if (n.getAstatus().equals(NodeStatus.VULNERABLE)
					|| n.getStatus().equals(NodeStatus.VULNERABLE))
				return NodeStatus.VULNERABLE;

			// When Status is Unknown to defender and attacker
			double rand = Math.random();
			if (rand > 0.6)
				return NodeStatus.PATCHED;
			else
				return NodeStatus.VULNERABLE;

			// Action is HACK
		} else {

			// Since status is patched, attacker cannot hack it
			if (n.getStatus().equals(NodeStatus.PATCHED))
				return NodeStatus.PATCHED;

			// If it is already hacked, attacker cannot hack it again. no use.
			if (n.getStatus().equals(NodeStatus.HACKED))
				return NodeStatus.HACKED;

			// When attacker knows it is vulnerable.
			if (n.getAstatus().equals(NodeStatus.VULNERABLE)) {
				// Updating the attacker action set when he compromised a node.
				// The action now includes all those nodes that are adjacent to
				// compromised node.
				WorldForMultiAgent.attacker.updateActionList(index);
				return NodeStatus.HACKED;
			}

			// When attacker does not know the status of the function. it is
			// unknown to him even it is known to the defender. Attacker must
			// perform scan action to know the status.
			return NodeStatus.UNKNOWN;
		}
	}

	public String getDefenderUpdatedStatus(String action, Node n) {
		// Action is SCAN
		if (action.equals(MainClass.ACTION_SCAN)) {
			// If Attacker has already Hacked it, defender will come to know
			// about it by scanning.
			if (n.getStatus().equals(NodeStatus.HACKED))
				return NodeStatus.HACKED;

			// If attacker has not hacked it, defender will have to see its
			// view.
			if (n.getDstatus().equals(NodeStatus.VULNERABLE)
					|| n.getStatus().equals(NodeStatus.VULNERABLE))
				return NodeStatus.VULNERABLE;

			if (n.getDstatus().equals(NodeStatus.PATCHED)) {
				double rand = Math.random();
				if (rand > 0.4)
					return NodeStatus.PATCHED;
				else
					return NodeStatus.VULNERABLE;

			}

			// When status is Unknown to the defender and to the attacker.
			double rand = Math.random();
			if (rand > 0.5)
				return NodeStatus.PATCHED;
			else
				return NodeStatus.VULNERABLE;

			// Action is PATCH
		} else {

			if (n.getDstatus().equals(NodeStatus.UNKNOWN))
				return NodeStatus.UNKNOWN;

			if (n.getDstatus().equals(NodeStatus.PATCHED))
				return NodeStatus.PATCHED;

			if (n.getDstatus().equals(NodeStatus.VULNERABLE))
				return NodeStatus.PATCHED;

			// When status is hacked.
			return NodeStatus.PATCHED;

		}
	}

	@Override
	public List<StateTransitionProb> stateTransitions(State arg0,
			JointAction arg1) {
		// TODO Auto-generated method stub
		return null;
	}

}
