package mainClass;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import QLearning.MAction;
import burlap.mdp.core.state.State;
import classes.NetworkComponent;
import classes.Node;
import classes.Vulnerability;
import database.InstallDatabase;

public class MainClass {

	// Path of the database
	public static String FILENAME = "/Users/yatinwadhawan/Documents/Projects/Alpha/src/database/";
	public final static String ADDRESS = "/Users/yatinwadhawan/Documents/Results/";

	// Data Structure storing vulnerabilities.
	public static ArrayList<Vulnerability> vulnerabilityList = new ArrayList<Vulnerability>();
	public static HashMap<String, Vulnerability> vulnerabilityMap = new HashMap<String, Vulnerability>();
	public static ArrayList<NetworkComponent> networkList = new ArrayList<NetworkComponent>();
	public static HashMap<String, NetworkComponent> networkMap = new HashMap<String, NetworkComponent>();
	public static ArrayList<Node> nodeList = new ArrayList<Node>();
	public static HashMap<String, Node> nodeMap = new HashMap<String, Node>();

	// Data Structure for Storing QLearning variables
	public static ArrayList<String> ACTIONS = new ArrayList<String>();
	public static HashMap<String, Integer> reward = new HashMap<String, Integer>();
	public static List<MAction> actionList = new ArrayList<MAction>();
	public static int count_state = 0;
	public static ArrayList<State> wstateList = new ArrayList<State>();
	public static List<State> statelist = new ArrayList<State>();

	// Configuration Variables
	public static int trials = 4000;
	public static double learningrate = 0.2;
	public static double gamma = 0.2;
	public static double epsilon = 0.2;

	public static void main(String[] str) throws IOException {

		// Installing database into data structures from files
		InstallDatabase.install();
		InstallDatabase.print();

		// Writing Configuration to the file
		clear(ADDRESS + "config.text");
		writeConfig(ADDRESS + "config.text");
		
		
		
		

	}

	public static void writeConfig(String name) throws IOException {
		File fout = new File(name);
		FileOutputStream fos = new FileOutputStream(fout, true);

		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

		bw.write("Trials-" + trials);
		bw.newLine();
		bw.write("Learning Rate-" + learningrate);
		bw.newLine();
		bw.write("Epsilon-" + epsilon);
		bw.newLine();
		bw.write("Discount Factor-" + gamma);
		bw.newLine();
		bw.close();
	}

	public static void clear(String name) throws FileNotFoundException {
		PrintWriter writer = new PrintWriter(name);
		writer.print("");
		writer.close();
	}

	static void purgeDirectory(String str) {
		File dir = new File(str);
		for (File file : dir.listFiles()) {
			file.delete();
		}
	}

}
