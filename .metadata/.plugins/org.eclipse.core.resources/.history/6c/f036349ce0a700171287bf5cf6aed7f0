package QLearning;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import mainClass.MainClass;
import burlap.behavior.valuefunction.QValue;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.state.State;
import classes.Node;

public class DecisionMaking {

	public static void startDecisionMaking() {

	}

	public static void writeAllStates(ArrayList<State> allStates, String name)
			throws IOException {

		File fout = new File(name);
		FileOutputStream fos = new FileOutputStream(fout, true);
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

		for (int i = 0; i < allStates.size(); i++) {
			State s = allStates.get(i);
			WState w = (WState) s;

			bw.write("State " + i + "\n");

			ArrayList<Node> nl = w.getNodeList();
			for (int j = 0; j < nl.size(); j++) {
				Node n = nl.get(j);
				bw.write(n.getName());
				bw.newLine();
				bw.write(n.getStatus());
				bw.newLine();
				bw.write(n.getAdj().toString());
				bw.newLine();
			}
			bw.newLine();
		}
		bw.close();
	}

	public static void createFilesForEachStateQValues(
			HashMap<State, List<List<QValue>>> map) throws IOException {

		int i = 1;
		Set set = map.keySet();
		Iterator itr = set.iterator();
		while (itr.hasNext()) {
			State s = (State) itr.next();
			WState w = (WState) s;

			String name = MainClass.ADDRESS + "/states/" + i++ + ".text";
			File fout = new File(name);
			FileOutputStream fos = new FileOutputStream(fout, true);
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
			ArrayList<Node> nl = w.getNodeList();
			for (int j = 0; j < nl.size(); j++) {
				Node n = nl.get(j);
				bw.write(n.getName());
				bw.newLine();
				bw.write(n.getStatus());
				bw.newLine();
				bw.write(n.getAdj().toString());
				bw.newLine();
			}
			bw.newLine();
			List<List<QValue>> q = map.get(s);
			for (int x = 0; x < q.size(); x++) {
				List<QValue> l = q.get(x);
				for (int y = 0; y < l.size(); y++) {
					String text = l.get(y).a.actionName() + ":" + l.get(y).q
							+ ",";
					bw.write(text);
				}
				bw.newLine();
				bw.newLine();
			}
			bw.close();
		}

	}

	public static void writeFile(List ls, String name, int number)
			throws IOException {
		File fout = new File(name);
		FileOutputStream fos = new FileOutputStream(fout, true);

		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

		bw.write("Episode");
		bw.write(Integer.toString(number));
		bw.newLine();
		if (name.equals(MainClass.ADDRESS + "state.text")) {
			List<State> l = (List<State>) ls;
			for (int j = 0; j < l.size(); j++) {
				WState s = (WState) l.get(j);
				bw.write(s.getNodeList().toString());
				bw.newLine();
			}
		} else if (name.equals(MainClass.ADDRESS + "reward.text")) {
			List<Double> l = (List<Double>) ls;
			for (int j = 0; j < l.size(); j++) {
				bw.write(l.get(j) + ",");
			}
			bw.newLine();
		} else {
			List<Action> l = (List<Action>) ls;
			for (int j = 0; j < l.size(); j++) {
				bw.write(l.get(j).actionName() + ",");
			}
			bw.newLine();
		}
		bw.newLine();

		bw.close();
	}

	public static void writeConfig(String name) throws IOException {
		File fout = new File(name);
		FileOutputStream fos = new FileOutputStream(fout, true);

		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

		bw.write("Trials-" + MainClass.trials);
		bw.newLine();
		bw.write("Learning Rate-" + MainClass.learningrate);
		bw.newLine();
		bw.write("Epsilon-" + MainClass.epsilon);
		bw.newLine();
		bw.write("Discount Factor-" + MainClass.gamma);
		bw.newLine();
		bw.close();
	}

	public static void clear(String name) throws FileNotFoundException {
		PrintWriter writer = new PrintWriter(name);
		writer.print("");
		writer.close();
	}

	static void purgeDirectory(String str) {
		File dir = new File(str);
		for (File file : dir.listFiles()) {
			file.delete();
		}
	}
}
