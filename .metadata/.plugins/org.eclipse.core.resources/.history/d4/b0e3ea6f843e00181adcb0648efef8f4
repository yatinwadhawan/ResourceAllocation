import ilog.concert.*;
import ilog.cplex.*;

public class EraserAlgo {

	public static void solve() throws IloException {
		int targets = 3;
		double Z = Double.MAX_VALUE;
		double B = 1; // Budget: number of hours defender has.

		// Values of the targets when it covered and uncovered by defender for
		// defender and attacker.
		double[] defCov = { 11.0, 7.0, 14.0, 15.0, 19.0, 16.0, 17.0 };
		double[] defUCov = { -22.0, -17.0, -28.0, -30.0, -38.0, -32.0, -35.0 };
		double[] attCov = { -33.0, -21.0, -42.0, -45.0, -57.0, -48.0, -51.0 };
		double[] attUCov = { 33.0, 21.0, 42.0, 45.0, 57.0, 48.0, 51.0 };
		double[] hours = { 4.0, 2.0, 3.0, 10.0, 5.0, 6.0, 5.0 };

		IloCplex cplex = new IloCplex();
		IloNumVar[] c = cplex.numVarArray(targets, 0.0, 1.0);
		IloNumVar[] a = cplex.boolVarArray(targets);

		IloNumExpr[] attUtil = new IloNumExpr[targets];
		for (int t = 0; t < targets; t++) {
			attUtil[t] = cplex.sum(cplex.prod(attCov[t], c[t]),
					cplex.prod(attUCov[t], cplex.diff(1.0, c[t])));
		}

		IloNumExpr K = cplex.numExpr();

		// Constraint 1
		cplex.addEq(cplex.sum(a), 1);

		// Constraint 2
		cplex.addLe(cplex.sum(c), B);

		// Constraint 3
		for (int t = 0; t < targets; t++) {
			cplex.addLe(cplex.diff(D, defUtil[t]),
					cplex.prod(cplex.diff(1.0, a[t]), Z));
		}
		// Constraint 4
		for (int t = 0; t < targets; t++) {
			cplex.addGe(K, attUtil[t]);
			cplex.addLe(cplex.diff(K, attUtil[t]),
					cplex.prod(cplex.diff(1.0, a[t]), Z));
		}

		// Objective
		cplex.addMaximize(D);

		boolean flag = cplex.solve();
		System.out.print(cplex);
		System.out.println();
		System.out.println();
		System.out.print("Results");

		if (flag) {
			System.out.println();
			System.out.println("Solution Status = " + cplex.getStatus());
			System.out.println("Optimal Value: " + cplex.getObjValue());
			System.out.println("K: " + cplex.getValue(K));
			System.out.print("Coverage Vector: ");
			double[] val = cplex.getValues(c);
			for (int j = 0; j < val.length; j++) {
				System.out.print(val[j] + " , ");
			}
			System.out.println();
			System.out.print("Attack Vector:   ");
			val = cplex.getValues(a);
			for (int j = 0; j < val.length; j++) {
				System.out.print(val[j] + " , ");
			}
		} else {
			System.out.println();
			System.out.println("Not solved");
			System.out.println("Primal Feasible: " + cplex.isPrimalFeasible());
			System.out.println("Dual Deasible: " + cplex.isDualFeasible());
			System.out.println("Is MIP: " + cplex.isMIP());
			System.gc();
		}
		cplex.end();

	}
}
